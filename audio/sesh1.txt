{"text":"Аккаунты, это просто как бы стоит, там аккаунты, а у аккаунтов есть storage, если аккаунт является контрактом, то это все в одном кредите. И дальше газовые переменные типа gasused, gaslimit, они не нужны тут. Как бы из основного получается вот эти четыре переменных. Предыдущий блок, транзакции, которые войдут и применяются к стейту из предыдущего блока, и какие ресепции из этого выйдут. То есть транзакции, то что входит в блокчейн, машину мы это будем называть, ресепция, что произошло, что отвечает она назад. Можно переименовать транзакцию как транзакцию inbox, а ресепция как event outbox, потому что это событие. Только это input и output от супермашины, от того, кто ее создал и управляет, в том числе проподер, например. Я же предлагаю добавить второй уровень общения уже, чтобы эти машины могли создавать субмашины, и с ними также общаться через txoutbox и eventinbox, от них уже. Соответственно, с этого момента мы можем записывать это как квадратики, стейт мы просто игнорируем, потому что он не участвует, он просто как финальный хэш того, что произошло по результату. Соответственно, можно дорисовать вот это вот так, это тоже закрыть, это получается txinbox, txoutbox, event. Почему ресепция надо заменить на event, eventinbox? Похоже, как раз написываешь модель актеров, так называемых, которые я тебе говорил в этом форуме. Паттерн, блядь, как называется? Ну, актеры так и называются. Короче, дизайн-паттерн один из главных. Получается изоляционная система, которая называется актер, и актеры общаются с другими актерами через события. Внутри находится какая-то машина, которая может спаунить других актеров, которые также общаются. Это как в браузере, например, наиболее яркий пример это когда ты общаешься с другим окном. То есть, ты можешь спаунить другое окно, и, соответственно, ты можешь с ним общаться только через события. А внутри окна там есть собственное состояние. Это примерно то же самое, только в рамках военнодействия блокчейна и внешней системы. А сколько там тоже есть внутренние и внешние, или там один уровень, входящий и выходящий? Внутри всегда есть какое-то внутреннее состояние. Просто тут способ передачи другой. То есть, вряд ли там есть нонс и секьюрность какая-то. Да, эти актеры это более аффектная штука, они не говорят тебе, как реализовывать переделку. То есть, остается квадрат из двух инпутов и двух аутпутов. Как выглядят транзакции Input? Так же, как в эфириуме. Это название откуда куда, нонса увеличивающая и данные, которые передаются, название метода и подпись. А подпись может быть многоградной, типа состоят из агрегирований. Соответственно, точно так же выглядят транзакции Output. Только транзакции Output теперь подписаны всеми участниками, кто отвечает за валидацию. То есть, если в Input вошел, например, один человек, а эта сущность на пять, то тогда в Output будет сущность подписана уже пятью подписями сразу. И это происходит в момент голосования за блок. То есть, когда они как раз при коммите возвращают эту подпись на предложенный пропозером блок, параллельно они подписывают каждую исходящую транзакцию. Соответственно, в результате у пропозера есть и подписанный блок, и 10, например, подписанных транзакций, которые можно засылать дальше. Ивенты In приходят от вышестоящих субмашин, потому что эти машины уже точно так же запущены на этом же девайсе. И, соответственно, гарантированно все участники уже имеют там точно такой же набор ивентов, потому что они запускают все вышестоящие машины, которые могут послать эти ивенты назад. То есть, представь, у тебя три разных эфира на компьютере запущены, и если ты плюс-минус с одинаковой скоростью синкаешься, то ивенты, которые три разных эфира дали, у тебя сагрегируются в один и тот же event pool. То есть, это как main pool только для ивентов, которые приходят сверху. Дальше получается очередь... На обработку ивентов."}

{"text":"То есть у всех у них одинаковые блокчейны исполняются, вот эти машины, и у всех одинаковый поток ивентов, просто с немного разным, может быть, порядком. Но вот пропозер, он создает из этого определенный порядок, как к нему это пришло, такой референсный порядок ивентов, и всем рассылает. И все остальные проверяют теперь, когда проверяют транзакции, они проверяют подпись, что нюансы увеличились и так далее. С ивентами они проверяют скорее, как засинхронизуя вот эту субмашину до такого-то блокнамера, там седьмого, а был, например, четвертый, до такого-то хэша. И дальше, и такой-то список ивентов, и дальше каждый, кто проверяет за пропозором, смотрит, что эти ивенты реально у него в ивент-пуле тоже есть. То есть у него то же самое исполнилось, такие же ивенты прилетели, может быть, в другом порядке только, но само наличие их должно быть. Соответственно, ивенты точно так же исполняются, как и транзакции. То есть они могут вызвать, например, следующую транзакцию вверх, либо могут вызвать, например, когда из канала приходит ивент, что пришли деньги хабу, то он создает txout, только теперь направление является уже следующий канал, к которому он уже хочет отправить эти деньги. Ивенты out, соответственно, могут отправить дальше события вниз, к нижестоящему сайнеру. То есть чем ниже направление, тем ближе доходит до основного рутового, рутовой машины сайнера, у которого один свой ключ приватный, он подписывает просто сам себе моментально блоки. И все, вот такой вот поток. Когда сайнер хочет что-то сделать, какое-то изменение, он запускает свою первую транзакцию, его машина отправляет дальше транзакции в мультисиги, либо в каналы, либо в депозитарии. Соответственно, дерево растет так. Есть сайнер-сущность, она может создавать новые энтити, другие, которые с кем-то составны, либо могут от себя добавлять каналы и депозитарии. И каждая другая сущность также может иметь каналы и депозитарии. А у каналов и депозитарий субмашин быть не может, потому что они финальные, так сказать, листья. И все, и так сущность может взаимодействовать с другими сущностями через каналы. Если взаимодействие идет как-то плохо, оно использует общий канал в виде депозитария. То есть два вида субмашин, которые выполняют разные цели. А энтити – это организационная субмашина, которая накапливает пропозалы. В ней голосуют парент-машины, вот эти, или супермашины, за эти пропозалы. Когда накапливается какой-то процент, то эти пропозалы внутри исполняются и выбрасывают. Либо event out вверх, либо, например, тэгс аут, чтобы дальше что-то изменить, например, в депозитарии. Либо event out, чтобы внизу, например, что-то изменить. Короче, термин actor – заебись. Я смотрю, что есть попытки сделать actor-based для блокчейна на скале. Но это хороший термин, очень подходит к истории, которую ты задизайновал. Что ты понимал в формулировке? Актер в данной модели взаимодействует путем обмена сообщением с другими актерами. Каждый в ответ на получение сообщения может принимать локальные решения. Создавать новые актеры, посылать свои сообщения, устанавливать, как следует, реагировать на последующие сообщения. Ну да, похоже на... Да, да, похоже. Заверите сюда. Да, дверь я открыл. Да... Анонимность. Так... Спасибо за субтитры Алексею Дубровскому!"}

{"text":"Смотри, на всякий случай. Я не хотел бы сейчас углубляться в эту статью с актерами, но просто посмотри, как он рисует в блоке. Я её скину в ссылочку. Просто на этой тракции по диагонали глянь, и не вчитывай, если что-то откликается, потому что там не всё может быть. А тут бейс блокчейн, нифига себе. Какая красота. Я просто потому, что можно иллюстрацию, например, взять, именно подход к иллюстрации. А давай вглубь пока не погружаться. Но если погружаешься, то ты, наверное, с кочетов. Да, да, и тут могут быть расхождения с тем, что Егор придумал, поэтому зачем. Я только как пример картины, кстати. Так, отключается состояние. Состояние мы не трогаем, при этом оно внутреннее. У нас получается event. Выворачиваемся на диспозиторий, как на изолированную систему, которая общается с событиями. Мы сообщаем, мы что-то от него получаем. Транзакция на вход. Да, авторазакция, какие данные находятся в основной транзакции. У нас что-то на off-chain системе происходит. Нужно каким-то образом решить, кто будет вообще транзакцию отправлять, или все отправляют одновременно. Пропозер. У каждой карты есть пропозер. Ну, допустим, смотри. Двое географических станций. У нас два человека решили кинуть деньги друг к другу. Один дает другому деньги. И такой, надо сообщить об этом эфириуму. Мы совершили операцию off-chain. Мы подтвердили, что мы согласны с операцией. И кто-то один из двух получает проект миссии. Да-да-да, за всем кто-то проект. Когда смещается состояние в канале, ты не обязан продать пучок. Депозитарий — это пока отдельная сущность. Он отвечает за ввод и вывод депозитов в систему. Вообще деньги рождаются там. Это корень появления ассетов. Я так понял, что ты когда говоришь, что у тебя столик, в локальном смысле я имею в виду эфириум. Да, эфириум и лент. Любой эфириум и лент, да. Любая сетка, которую ты делаешь. В то же самое время, в самой этой среде, в джел-скриптовой, есть его профессия. То есть машина-депозитарий, которая работает не полноценно, а просто общается с полнодой, либо локальной, либо какой-то внешней. Минимальный интерфейс поддерживает такой же, чтобы на вход можно было добавлять транзакции. Спасибо за субтитры Алексею Дубровскому!"}

{"text":"Mm-hmm. Mm-hmm.  Mm-hmm. Mm-hmm. Mm-hmm.  Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm.  Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm. Mm-hmm."}

{"text":"ט�βאַרו הַ זה בָּדֵים ונָּברים כְָּׁׄםלָרֹיוֹ. Φυσικά, η πόλη είναι η πρώτη πόλη που έχει διεθνεί την πόλη. Φυσικά, η πόλη είναι η πρώτη πόλη που έχει διεθνεί την πόλη. Φυσικά, η πόλη είναι η πρώτη πόλη που έχει διεθνεί την πόλη. Φυσικά, η πόλη είναι η πρώτη πόλη που έχει διεθνεί την πόλη. Φυσικά, η πόλη είναι η πρώτη πόλη που έχει διεθνεί την πόλη. Φυσικά, η πόλη είναι η πρώτη πόλη που έχει διεθνεί την πόλη. Φυσικά, η πόλη είναι η πρώτη πόλη που έχει διεθνεί την πόλη. Φυσικά, η πόλη είναι η πρώτη πόλη που έχει διεθνεί την πόλη. Φυσικά, η πόλη είναι η πρώτη πόλη που έχει διεθνεί την πόλη. Φυσικά, η πόλη είναι η πρώτη πόλη που έχει διεθνεί την πόλη. Φυσικά, η πόλη είναι η πρώτη πόλη που έχει διεθνεί την πόλη. Φυσικά, η πόλη είναι η πρώτη πόλη που έχει διεθνεί την πόλη. Φυσικά, η πόλη είναι η πρώτη πόλη που έχει διεθνεί την πόλη. Φυσικά, η πόλη είναι η πρώτη πόλη που έχει διεθνεί την πόλη. Φυσικά, η πόλη είναι η πρώτη πόλη που έχει διεθνεί την πόλη. Φυσικά, η πόλη είναι η πρώτη πόλη που έχει διεθνεί την πόλη. Какие события происходят? Любые изменения резервов. Сначала резервы попадают на аккаунт сайнера, потом он его закладывает в аккаунт канала между кем-то, либо в аккаунт сущности опять-таки с кем-то. А ты подписываешься на какие-то события? Ты подписываешься на все сущности, которые связаны с тобой. На ID всех машин. На себя как сайнера, на ID всех, с кем у тебя канал, чтобы узнать, когда у них изменится, например, схема аутификации, и у тебя есть время, чтобы либо начать дисплет, либо обновиться до новых подписей. Что еще? То есть на те транзакции, которые ты сам делаешь, и которые тебя касаются, и которые касаются всех твоих каунтерпатий. Собственно, это основное. И ты эти транзакции все рефлектишь в своем локальном состоянии. То есть меняешь JSON-карту, резерву разных токенов для себя самого, и для своих сущностей, и для канала, в котором ты работаешь. Сайнер, сущности сайнера и канала сайнера. Но при этом получается, что если поесть эти эфириумы, типа, смотри, от хаба идет запрос. От кого угодно. От любого сайнера."}

{"text":"сущности это общая общая как бы машина для всех вот представьте что это то есть это сайнерские сущности это сущность двух сайнеров как мультисиг вот это канал мультисига сущность juicy а это депезжетарий соответственно любая либо это сущность либо эти три сущности могут общаться как интенсивность это канал он с ним общаться не может потому что каналу чтобы связаться представлено прослать и вент вниз соответствующую сущность которые есть например вот эта часть канала это часть канала и соответственно они могут посылать тикс аут либо канал транзакция ходит выходит сверху они ходят выходит вот стрелочки чем отличается транзакции подписаны нижними участниками полностью сигнатура есть чтобы послать айбиси канал надо подписи айби чтобы она была из двух подписей состояла а и венты и не нужны подписи потому что предполагается что у тебя уже есть все субмашины когда ты с ней работаешь то есть у любой субмашины есть доступ она может писать любую супер машину вот это на машину и вентами получается эфириум это это субмашина это субмашина на твоей вот на твоей крючковой машины да сайнерской то есть сайнерская машина на под ней уже нет никого так не только оператор который сам из транзакции воздух создает кошелек кошелек взаимодействует сайдерская машина то есть она супер машина у нее будет субмашина это дипезитария и канал или другие сущности у которых точно так же пистареи канал и все они могут вот это девайсы и у них только по одному инстанцию на каждую машину то есть вот на машине айс 3 машина запущена на машине силы только 2 а ну плюс по одной на каждую дипзитарий каждые 100 миллисекунд цикл клуб который проверяет лап надо ли мне пропозить что-то машины если ты пропозер ты пропозер ты си если пропозер вот в этой сущности то он растопили сегодна рассылает сюда и сюда свою следующую традицию получаю когда получил подписи он рассылает все подписи все финализована когда финализована тут и вент выпускаются идут на этаж ниже соответственно тут они пошли включаться сюда и сюда тут какой-то из этих пропозера 100 миллисекунд он начинает уже обрабатывать и вент пул который не обработал исключает их блок и дальше рассылать вниз и конечный сайнеры ниже них уже никого нет с ним взаимодействует напрямую кошелек то есть это лицо то есть твой кошелек это главная супермашина она взаимодействует она делает запросы типа твоего лица депозитарий или канала делая подписанные транзакции кошелек просто ui который читает состояние вот отсюда стоит и дает возможность создать транзакции на вход просто визуальное отображение а на ноде запущены сами машины которые принимают принимают на входе транзакции когда у тебя твой кошелек получил транзакцию он сначала создает пропозал он так как ты и главный сайнер по пропозал автоматически исполняется просто чтобы он в истории оставался и при исполнении пропозора исходящие транзакции создаются в любое количество и в процессе консенсуса транзакции подписываются вместе с тем же как и подписывается сам блок соответственно когда у тебя подписаны транзакции ты как пропозор и отсылаешь следующий ткс отпуск следующей машины куда она направлена если ты владеешь пропозорской машины для следующей машины то ты сам предлагаешь через 100 миллисекунд блок если нет то ты делаешь шер на пропозорскую машину и она себе добавляет твой транзакции"}

{"text":"— Я не понимаю, когда хаб это делается, когда здесь есть система. — А хаб — это тоже такая же сущность, с которой ты держишь каналы. — А зачем она нам, если у нас уже может быть кто-то принимать решение, кто, ну, типа, если у нас... Короче, зачем он нам нужен в контексте секретной системы, если кто-то может объявить себя хабом? — Любой может объявить себя хабом, конечно. Просто ты как человек выбираешь в кошельке список тех, кто желает быть хабом, у всех разные параметры. Кто-то там существует много лет, у кого-то больше каллатрова, кто-то является отображением репутационной сущности какой-то известной. И ты сам выбираешь, это как выбор банка. А у них такая же машина запущена на их системе. Это может быть либо одна сайнерская машина, то есть хаб может быть, по сути, сайнером одним, либо может несколько из них, несколько сайнеров объединенных, такой кворумский, так сказать, тоже хаб. И между тобой и хабом создается субмашина-канал. Соответственно, любое твое взаимодействие с хабом, ты посылаешь свою субмашину, в зависимости от того, кто из вас пропозер, у вас происходит консенсус, она выполняется, и ивенты идут уже вниз, в машину хаба. Дальше он ее обрабатывает, и дальше посылает в канал следующему участнику. Короче, будем попробовать расставать сверху-вниз. Получается, от UI до финального этого. Получается, у нас есть интерфейс, он общается у нас с нодой вокальной. Это скорее уже имплементация, да? Он общается с нодой через веб-сокеты. В ноде у нас запущено, что у нас получается? Вот этот демон, который управляет консенсусом машины. Там всегда есть сайнерская машина. Так, хорошо. Теперь смотри, вот у нас есть UI, он показывает нам какие-то данные. У нас есть нода, она присылает нам какие-то данные, типа статус кошелька, какие-то прогрессы, которые происходят в этот момент. Будь здоров. Какой это самый кокаиновый чик. Хорошо, у нас тут UI. А ноды у нас, получается, самая система. У него будет какой-то стейк. Здесь у нас будет остановишь код происходить, да? Да, конечно. Неважно, является эта нода хабом или нет. Это надстройка. Хабами называются те, у кого много каналов. Хорошо, когда мы говорим канал, у нас есть еще один человек. Я рисую еще один UI, еще одну ноду. У него стоит машина какая-то здесь. Теперь мне нужно, где-то тут, собственно, депозиторий получать. Подожди, у каждого еще... Вот уже хорошее описание машины. Ты просто квадратик такой рисуешь. Это сайнерская машина, дальше над ней квадратик. Это депозиторий машины. То есть это levelidb хранится по ключу сайнер.id, машин.id. Два у тебя получается ключа. Хранится хедер, который является корнем машины. Я просто пытаюсь через user story это все понять. Пока не думай про user story. Мы же должны как можно быстрее дойти до MVP, чтобы что-то функционировало у нас. Все понятно. User story. Вот кошелек отправляет. Это может быть системинальный запрос. Все равно все происходит вот тут. Он просто узнает о состоянии новой транзакции. Депозиторий."}

{"text":"То есть то, что ты нарисовал. И мне нужно отправить отсюда вот сюда. Что происходит? Что у тебя изначально есть? А у тебя изначально есть токены? Ну, допустим, откуда-нибудь берутся. То есть у тебя есть какой-то аккаунт, где у тебя есть токены. Ну да, у тебя есть Ethereum, например. Любой там ERC-20, например, у тебя есть, ты его забридживаешь сначала, засовываешь в смарт-контракт специальный, резервный менеджер. Ну он так и называется DebitStore, то есть там ты переводишь стандартное владение токеном внутрь вот этого контракта, где ты тоже его владеешь, просто через прослойку. Уже теперь ты баланс внутри этого контракта. Но это первый этап, ты все еще не можешь послать. Точнее, ты можешь послать ему внутри этого депутатария, но заплатишь заанченную комиссию, и вообще никакой разницы нет по сравнению с обычным переводом USDT. Поэтому ты пользуешься системой банковской, так сказать, хабовской системой. Ты выбираешь в юзер-интерфейсе, выбираешь какой тебе нравится хаб, нажимаешь присоединиться. Это вот обычный человек, это не хаб, поэтому чтобы отправить обычного человека, третий сущность создается, у которого то же самое, только он как бы 24 на 7 онлайн, с его сайтером можно соединиться. Короче, это типа Headless получается. Ну да, и либо оператор подсоединяется, чтобы проверить здоровье системы, а не чтобы делать транзакции. То есть он не использует хаб как свой кошелек, потому что хаб просто выполняет технические задачи, прибалансируется, обрабатывает ПЦЖ. Егор, подскажи, пожалуйста, в схемке у тебя слева подпись signers, понятно? А-B и А-B-C, это что такое? А, Б, С сущности, эти два создают А, Б сущность на двоих, а эти А, Б, скобочка, и С. То есть это сущность А, Б плюс С. То есть они multi-sig плюс этот. Это может быть как и канал, может быть как и сущность самостоятельно. Просто канал это настройка на сущность, которая дает возможность выйти из сущности, забрав свою часть денег. А из обычной сущности выйти нельзя. Значит, получается, я хочу вывезти деньги, я сообщаю сюда, он сообщает хабом. Вы создали канал сначала с хабом. Канал с хабом. То есть у вас субмашина создалась. Вот как раз представьте, ты А, он Б, вот у вас субмашина А, Б. Это ваш канал. То есть вы шарите какое-то состояние. Да, у вас блокчейн на двоих получается. Поверх тех ваших же сайнер-машин. Соответственно, вы теперь общаетесь с этим блокчейном через создание сначала транзакции в своей сайнер-машине, которая создает транзакцию в вашем канале на двоих. И обратно же получаете от него ивенты в вашу сайнер-машину. И дальше на кошелек, на UI. Но, опять-таки, он так просто сразу ты не можешь переводить. Ты сначала должен зачислить вот в этот вот канал. Вот в этот канал с хабом. А как ты туда зачистишь? Тут входит третий, третий субмашин, депозитарий. То есть поверх вот это А и Б у вас есть эта хуйня. И помимо А и Б, субмашина вот эта, депозитарий, она будет нарисована всегда наверху самым. Потому что она у всех одинаковая. То есть одинаковое состояние на всех участников. И вы делаете transaction out, она попадает в transaction in этого этериума, которое переводит деньги с резервного баланса сущности А на резервный баланс сущности А, Б. Параллельно сдвигая либо не сдвигая он дельту, которая помогает понять кому, собственно, зачисляется, левому либо правому участнику. То есть сначала там было пусто, у кого-то на резервы были бабки. И теперь ты хабу закладываешь, либо со своей стороны, ну твоя задача закинуть со своей стороны. Соответственно, если ты левый участник, то как я тебе тогда рисовал схемку с он дельтой. Так, то есть увеличивается коллатерал, соответственно, по умолчанию деньги попадают правому участнику, это хабу. Соответственно, чтобы зачистить тебе, ты указываешь, я зачистил его левому, и у тебя он дельта сдвигается на такое же количество денег. Соответственно, он дельта плюс он дельта равна теперь 100. Если происходит диспет, ты получаешь бабки назад. То есть у тебя сейчас заложен коллатерал в канале к хабу, ты можешь его моментально теперь посылать. То есть получается, ты хочешь перестать деньги, ты сначала выделяешь эти средства. Закладываешь, залачиваешь в вашу машину канальную между тобой и хабом. Используя запрос в транзакцию на ин, в депозитарную машину, все вот эти 23 вида машины, entity, канал и депозитарная."}

{"text":"Когда ты хочешь работать с резервами, ты общаешься с депозитарием, когда ты хочешь работать с офдельтами и субконтрактами, ты общаешься с каналом. А если бы у тебя в этом была документация старая, уже заброшенная, была бы еще концепция, что если мы избавляемся от процесса перевода средств, остается процесс общения, передача текстового сообщения, как бы это выглядело. Передача текстового сообщения, как выглядело? Да, просто данные, без валидации с перевода средств. Любая транзакция это текстовое сообщение, и event out это тоже текстовое сообщение. Вы можете слайд транзакции с текстовым сообщением в ваш канал, и у вас в UI будет отображено, кто что написал. Это по сути как чат на двоих. Только теперь, когда вы залочили в депозитарии 100 долларов, депозитарий выбросил event. Так как он запущен на всех трех машинах, Node.js этот event автоматически распределил в event-inbox вашей машины. У канальной машины не может быть депозитарий, а он должен отправить это в ваши именно сайнеры. От лица кого вы находитесь в канале? Так, ты зачислил 100 баксов к кабу, тебе зачислил этот юзер. Вы оба теперь добавляете эту транзакцию, не событие, что я хочу сказать, что зачислилось 100 баксов в депозитарии эфировском. И вы закидываете транзакцию в канал. Первая транзакция создает предложение, типа я считаю, что так произошло. А вторая транзакция автоматически его одобряет, типа я согласен, что так произошло. Когда предложение одобрено, то внутри канала меняется состояние резерва. То есть оно становится 100 и меняется в состоянии он-дельта. Канал у нас только между кабом и участником получается. Ну да. То есть вот это у нас получается канал, то есть мы как бы соединяемся с кабом. И вот у нас общий стейд, который мы лидируем между собой. И точно так делает получатель. Он то же самое с кабом, по той же схеме. Только он не закладывает ничего, он же получающая сторона. Он вместо этого при присоединении к кабу говорит, я тебе, каб, доверяю на кредитный лимит до такой-то суммы. Эта сумма будет, например, суммарной 10 тысяч долларов в любых ассетах. То есть ты можешь мне прислать 5000 USDT, 5000 USDC, а потом ничего не прислать. Либо разных говно токенов. То есть по умолчанию канал еще должен знать цену на всех токены в этом канале. То есть иметь какой-то квотэйшн. Чтобы можно было выделить один кредитный лимит, а не каждый отдельный ассет указывать. Потому что это неудобно, мне кажется. Так вот, вот этот участник указал кредитный лимит, и теперь можно совершить первый платеж. Как происходит первый платеж? А, закидывает, ну в простом виде это будет, чтобы не говорить про субконтракты сейчас. Просто он говорит, я меняю off-delta так, что ты получаешь 50 в хабу. Вот это у них общий как бы блокчейн на двоих. То есть машина. Происходит консенсус, где вот эта транзакция, двигатель на 50, как бы финализируется. Это, соответственно, девайс хаба, это девайс юзера. И когда финализируется на девайсе хаба, у него event outbox выбрасывает ивент, который падает куда? В саймера. Саймер получает ивент, что тебе пришло 50 баксов в таком-то канале. Гарантированно, мы уже их получили и все подписано. Но такое условие, ты получишь их только если передашь эти 50 баксов Пете, следующему участнику. Условие показать секрет от какого-то хешлока. Там все это старая технология, все это понятно. И теперь хаб от лица саймерской машины выбрасывает теперь новый текст. Outbox у него вот этот. Только теперь в канал с вторым участником, собственно. И ему так же, допустим, вот, если бы эти B и C создали так же между тобой, а этой машины, допустим, не было. В принципе, тогда логично. А и B это их канал на двоих, B и C это их канал. Хоп-хоп-хоп, хоп-хоп-хоп, понятно? То есть он выбрасывает транзакцию в канал со вторым участником, где он говорит, я тебе так же перевожу 50 баксов. Вот такое же условие, хешлок какой-то. C соответственно, ему приходит ивент, когда у него финализуется на его же машине, эта машина выбрасывает ивент. Саймер получает этот ивент, расшифровывает пакет, там находится сам секрет для него. И он, соответственно, может вернуть секрет и получить, затянуть себе эти 50 баксов. И все, и дальше по цепочке оно возвращается."}

{"text":"То есть, транзакции туда, ивенты вниз. Все, и это может быть 10 кабов подряд. То есть, хоп, хоп, там дальше, пошел и до получателя. Со свопами по-другому. Со свопами он, ты добавляешь… Ты имеешь в виду, что свопы, ты имеешь в виду, когда меняется один токен. Два токена, да, на другой меняется. Там тебе не надо его роутить куда-то. Там вместо роутинга ордер-бук. То есть, на сайнерской машине хранится большой ордер-бук, который помнит, кто, с кем ему предложил что-то делать. Каждый новый ордер приходит, с этим ордер-буком матчится. Если матч нашелся, то, соответственно, назад по каналу возвращается. Мы вам готовы засетить. Ага. Ну, получается, смотри, в случае, если происходит обмен, то получается, что нужно, чтобы в выделенных средствах было как бы выделенное средство для типа USDT и эфириума. Типа, ну, два… Capacity, Capacity, объем для посылки ты имеешь в виду. Ну да, ну типа тебе нужно оказаться совершенно на двумя сразу одновременно. Ну да, вот, допустим, USDT ты владеешь, вот хаб. А эфиром не владеешь. Но чтобы получать эфир от хаба, тебе надо кредитный лимит открыть. Я говорю, я тебе там это, ты мне дашь это. А, нет, в эту сторону. Ты коллатерал потратил, получил кредит на эфире. Окей, хорошо. То есть это как раз вот Derive функция, которую я тебе показывал, она все это и описывает. Типа, сколько ты можешь получить в каком-то ассете, а это складывается из того, сколько входящего и исходящего кредита. То есть, если каждый из отрезков по 50, то 150 можно послать сейчас, если так, то 100, и наоборот. Сначала используется тот кредит, который тебе дали, пообещали, потом ты сам обещаешь свой коллатерал, потом ты сам входишь в свой кредит, в свой кредит на реню. Егор, а квадратик один, состоящий из четырех маленьких, это... Это депозиторий. Нет, я ввезу. Депозиторий вверху, на самом деле. Они все из маленьких четырех квадратиков. Да, да, да. Вот один, состоящий из четырех, это что? Ну, это отображение машины, ее последнего блока. Это машина. Да, просто главные основные филды. Вот я тут как раз нарисовал блок и зачеркнул те филды, которые не нужны сейчас. Да, да, да. А вот я пытаюсь понять, чтобы не было... Короче. Энтити – это что? Я там что-то забыл. Короче, энтити и машины как соотносятся? В данном чертеже даже не определено, кто есть энтити, кто есть что. Это уже надлогика. То есть машина рутовая – это всегда энтити сайнер. Она может создавать новых энтити с другими. Либо создавать субмашины в виде каналов с другими, либо депозитарии. У депозитариев и каналов нету подмашин, а у остальных энтити дальше по цепочке можно создавать сколько угодно. То есть энтити – это то сущность, которая используется как что-то целостное, у которой свой резерв есть. Какое взаимоотношение между энтити и машиной? Все, это машина. Три вида машин. Энтити, каналы и депозитарии. Это все абсолютно одинаковые машины. Под видом просто. А A, B и C – это, получается, энтити-машины, да? Ну да, либо это может быть канал. То есть зависит от того, при создании как вы договорились. Каналы отличаются от энтити, что вы помимо того, что меняете состояние, вы еще и обмениваете диспет-пруфами. То есть при выполнении вот этих переводов, там, где 3xout, там же создается и диспет-пруф подписанный, который в случае чего можно отправить к депозитарии. Угу. Слушай, это важно сейчас опустать, чтобы все нормально расписать. Что это все у нас стоит тайм-машины. Да. Их есть три типа, и между ними есть такие соглашения. Ну да, да. И рутовая сайнерская, она рождает новые машины. То есть ты через транзакцию как раз конструктор делаешь. А рутовая сайнерская, она какого типа? Просто энтити. То есть от нее можно строить сразу и каналы и депозитарии, а можно строить более сложные энтити."}

{"text":""}

