**"Hello, can you hear me? Alright, it's recording. So, as we discussed, where did we stop, and what code was generated?**  

This is about the server launching—it processes some kind of transactions that either propagate to their child processes or execute at the same level. That’s not the point right now, the hierarchy doesn’t matter to us. What concerns us is that, essentially, everything comes down to a single problem.  

When the server starts, it reads its state from **LevelDB**, and it does so in different ways. To reach its actual state, it needs to load the latest **snapshot** and apply all the blocks that occurred after that snapshot.  

At the most **minimal viable prototype** stage, snapshots do not exist. They are initially created **out of thin air**—a basic state is established, and all transactions are applied from there. But the very next upgrade that can be implemented immediately is adding **two types of snapshots** that will occur: **mutable** and **immutable** snapshots.  

Do you understand the difference?  

The **mutable** snapshot—it all depends on which keys it writes to in **LevelDB**. Essentially, the mutable snapshot writes to keys where all machine IDs are stored sequentially. As a result, you can instantly read them all and construct your entire **memory state** in one batch **LevelDB** request.  

We operate only with **JSON objects in memory**. That is, **LevelDB** is just a storage method, while all operations happen in memory. As we agreed, even a hub can afford **100GB of RAM** and hold **10 million channels**. So, in principle, we can ignore memory-storage synchronization altogether and just fully load everything at startup. That means when you launch the application, it instantly downloads everything from **LevelDB** into memory in a batch and constructs the **server object**, **signers**, and so on, simply in a loop.  

Now, the **mutable** snapshot stores data under direct keys. That is, **the first machine ID, sub-machine ID**, etc. There might also be properties stored, for example, **property points**. Because in the end, all data will have to be broken down into smaller pieces—since **LevelDB** won’t be able to compress **100KB** into a single entry for each **root machine state change**.  

Initially, we keep it compact—everything **inline**. That is, transactions remain inline within the block itself rather than being stored as a separate **LevelDB vertex** in the **DAG** (Directed Acyclic Graph). After all, data is fundamentally stored in a **DAG**.  

So, we have **two main ways** of storing snapshots—**mutable** and **immutable**.  

- The **mutable snapshot**, as I said, allows us to **instantly restore** the latest state. Meaning, every time a block is saved, we **merge** the entire mutable snapshot. But it’s not necessary to do this after every block—you could, for example, do it every **100 blocks**. By default, we save only the blocks, without snapshots. Then, if we need to restore within **100 blocks**, we simply **load the last mutable snapshot** and reconstruct the **latest in-memory state** as it was before shutdown.  

Hello? Can you hear me?  

- The **immutable snapshot**, on the other hand, does **not store data by key**, but **by hash**—similar to how the **Merkle DAG** works in **IPFS**. This ensures that even in the future, we **cannot overwrite** the snapshot. Instead, it remains **archived forever**.  

This makes it easy to **simulate** past states by reading and reconstructing the historical state of the system even **days into the past**—fully restoring the system’s state as it was at that exact moment, including the server."**  
